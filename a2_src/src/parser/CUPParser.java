
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 24 13:51:10 EST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import source.*;
import tree.Tree;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.BinaryOperator;
import tree.UnaryOperator;
import syms.*;
import syms.SymEntry.ProcedureEntry;
import machine.StackMachine;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 24 13:51:10 EST 2013
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\002\000\002\004\004\000\002\005\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\007\004\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\004\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\025" +
    "\003\000\002\015\005\000\002\016\005\000\002\017\004" +
    "\000\002\020\002\000\002\020\003\000\002\021\003\000" +
    "\002\021\005\000\002\022\005\000\002\023\004\000\002" +
    "\023\005\000\002\024\005\000\002\024\003\000\002\026" +
    "\005\000\002\027\007\000\002\027\005\000\002\030\002" +
    "\000\002\034\005\000\002\032\003\000\002\032\005\000" +
    "\002\033\006\000\002\033\010\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\005\000\002\033" +
    "\007\000\002\033\003\000\002\031\002\000\002\047\003" +
    "\000\002\047\005\000\002\047\004\000\002\035\003\000" +
    "\002\036\003\000\002\036\005\000\002\036\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\037\003" +
    "\000\002\037\005\000\002\045\003\000\002\045\003\000" +
    "\002\040\003\000\002\040\005\000\002\046\003\000\002" +
    "\046\003\000\002\041\004\000\002\041\004\000\002\041" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\006\000\002\042\002\000\002\042\003\000" +
    "\002\043\003\000\002\043\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\016\003\005\031\ufffe\033\ufffe\041\ufffe\045" +
    "\ufffe\046\ufffe\001\002\000\004\002\232\001\002\000\004" +
    "\002\uffff\001\002\000\014\031\ufffa\033\ufffa\041\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\004\002\001\001\002\000\014" +
    "\031\020\033\021\041\011\045\017\046\013\001\002\000" +
    "\004\052\225\001\002\000\006\002\ufffd\006\ufffd\001\002" +
    "\000\006\003\214\052\217\001\002\000\004\006\213\001" +
    "\002\000\014\031\ufffb\033\ufffb\041\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\004\015\211\001\002\000\006\003\153\052" +
    "\154\001\002\000\022\003\047\031\020\032\042\037\051" +
    "\042\044\047\040\050\046\052\050\001\002\000\006\003" +
    "\022\052\024\001\002\000\004\006\ufff3\001\002\000\020" +
    "\003\022\031\ufff9\033\ufff9\041\ufff9\045\ufff9\046\ufff9\052" +
    "\024\001\002\000\004\015\027\001\002\000\004\006\026" +
    "\001\002\000\020\003\ufff6\031\ufff6\033\ufff6\041\ufff6\045" +
    "\ufff6\046\ufff6\052\ufff6\001\002\000\012\003\030\012\033" +
    "\052\032\053\031\001\002\000\006\006\uffef\023\uffef\001" +
    "\002\000\006\006\ufff2\023\ufff2\001\002\000\006\006\ufff0" +
    "\023\ufff0\001\002\000\012\003\030\012\033\052\032\053" +
    "\031\001\002\000\004\006\ufff4\001\002\000\006\006\ufff1" +
    "\023\ufff1\001\002\000\004\006\037\001\002\000\020\003" +
    "\ufff5\031\ufff5\033\ufff5\041\ufff5\045\ufff5\046\ufff5\052\ufff5" +
    "\001\002\000\020\003\067\004\072\011\064\012\056\040" +
    "\071\052\070\053\060\001\002\000\010\006\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\004\052\144\001\002\000\006\006" +
    "\141\036\142\001\002\000\004\052\050\001\002\000\006" +
    "\006\uffd3\036\uffd3\001\002\000\016\004\072\011\064\012" +
    "\056\040\071\052\070\053\060\001\002\000\010\006\uffca" +
    "\035\uffca\036\uffca\001\002\000\016\006\uffc8\010\uffc8\024" +
    "\uffc8\026\uffc8\035\uffc8\036\uffc8\001\002\000\020\003\067" +
    "\004\072\011\064\012\056\040\071\052\070\053\060\001" +
    "\002\000\010\010\055\024\054\026\053\001\002\000\054" +
    "\005\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\030\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\044\uffc6\001\002\000\004\052\131\001\002\000\020" +
    "\003\067\004\072\011\064\012\056\040\071\052\070\053" +
    "\060\001\002\000\016\004\072\011\064\012\056\040\071" +
    "\052\070\053\060\001\002\000\022\005\uffc5\006\uffc5\025" +
    "\uffc5\030\uffc5\034\uffc5\035\uffc5\036\uffc5\044\uffc5\001\002" +
    "\000\046\005\uffb0\006\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\025\uffb0\030\uffb0\034\uffb0\035\uffb0\036\uffb0\044\uffb0\001" +
    "\002\000\004\027\121\001\002\000\042\005\uffc4\006\uffc4" +
    "\011\111\012\105\015\116\016\107\017\106\020\112\021" +
    "\114\022\110\025\uffc4\030\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\044\uffc4\001\002\000\010\006\uffcc\035\uffcc\036\uffcc\001" +
    "\002\000\016\004\072\011\064\012\056\040\071\052\070" +
    "\053\060\001\002\000\046\005\uffbb\006\uffbb\011\uffbb\012" +
    "\uffbb\013\101\014\100\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\025\uffbb\030\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\044\uffbb\001\002\000\046\005\uffb7\006\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\025\uffb7\030\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\044\uffb7\001\002\000\022\005\uffc2\006\uffc2\025" +
    "\uffc2\030\uffc2\034\uffc2\035\uffc2\036\uffc2\044\uffc2\001\002" +
    "\000\054\005\uffc8\006\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffe5\030\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\044\uffc8\001\002\000\004\052\076\001\002" +
    "\000\020\003\067\004\072\011\064\012\056\040\071\052" +
    "\070\053\060\001\002\000\052\005\uffaf\006\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\024\054\025\uffaf\026\053\030\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\044\uffaf\001\002\000\004\005" +
    "\075\001\002\000\046\005\uffb1\006\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\025\uffb1\030\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\044\uffb1\001\002\000\046\005\uffe5\006\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\025\uffe5\030\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\044\uffe5\001\002\000\046\005\uffae\006\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\025\uffae\030\uffae\034\uffae\035\uffae" +
    "\036\uffae\044\uffae\001\002\000\016\004\uffb4\011\uffb4\012" +
    "\uffb4\040\uffb4\052\uffb4\053\uffb4\001\002\000\016\004\uffb5" +
    "\011\uffb5\012\uffb5\040\uffb5\052\uffb5\053\uffb5\001\002\000" +
    "\016\004\072\011\064\012\056\040\071\052\070\053\060" +
    "\001\002\000\046\005\uffb6\006\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\025\uffb6\030\uffb6\034\uffb6\035\uffb6\036\uffb6\044" +
    "\uffb6\001\002\000\046\005\uffb3\006\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\025\uffb3\030\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\044\uffb3\001\002\000\016\004\uffb8\011\uffb8\012\uffb8\040" +
    "\uffb8\052\uffb8\053\uffb8\001\002\000\016\004\uffbf\011\uffbf" +
    "\012\uffbf\040\uffbf\052\uffbf\053\uffbf\001\002\000\016\004" +
    "\uffc0\011\uffc0\012\uffc0\040\uffc0\052\uffc0\053\uffc0\001\002" +
    "\000\016\004\uffbd\011\uffbd\012\uffbd\040\uffbd\052\uffbd\053" +
    "\uffbd\001\002\000\016\004\uffb9\011\uffb9\012\uffb9\040\uffb9" +
    "\052\uffb9\053\uffb9\001\002\000\016\004\uffbc\011\uffbc\012" +
    "\uffbc\040\uffbc\052\uffbc\053\uffbc\001\002\000\016\004\072" +
    "\011\064\012\056\040\071\052\070\053\060\001\002\000" +
    "\016\004\uffbe\011\uffbe\012\uffbe\040\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\016\004\072\011\064\012\056\040\071\052" +
    "\070\053\060\001\002\000\016\004\uffc1\011\uffc1\012\uffc1" +
    "\040\uffc1\052\uffc1\053\uffc1\001\002\000\026\005\uffc3\006" +
    "\uffc3\011\111\012\105\025\uffc3\030\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\044\uffc3\001\002\000\046\005\uffba\006\uffba\011" +
    "\uffba\012\uffba\013\101\014\100\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\025\uffba\030\uffba\034\uffba\035" +
    "\uffba\036\uffba\044\uffba\001\002\000\022\003\067\004\072" +
    "\011\064\012\056\030\uffac\040\071\052\070\053\060\001" +
    "\002\000\004\030\127\001\002\000\006\025\uffaa\030\uffaa" +
    "\001\002\000\006\025\125\030\uffab\001\002\000\020\003" +
    "\067\004\072\011\064\012\056\040\071\052\070\053\060" +
    "\001\002\000\006\025\uffa9\030\uffa9\001\002\000\046\005" +
    "\uffad\006\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\025\uffad\030" +
    "\uffad\034\uffad\035\uffad\036\uffad\044\uffad\001\002\000\046" +
    "\005\uffb2\006\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\025\uffb2" +
    "\030\uffb2\034\uffb2\035\uffb2\036\uffb2\044\uffb2\001\002\000" +
    "\054\005\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\044\uffc7\001\002\000\004\044\133\001\002\000" +
    "\022\003\047\031\020\032\042\037\051\042\044\047\040" +
    "\050\046\052\050\001\002\000\004\035\135\001\002\000" +
    "\022\003\047\031\020\032\042\037\051\042\044\047\040" +
    "\050\046\052\050\001\002\000\010\006\uffd0\035\uffd0\036" +
    "\uffd0\001\002\000\014\006\uffcd\011\111\012\105\035\uffcd" +
    "\036\uffcd\001\002\000\014\006\uffce\024\054\026\053\035" +
    "\uffce\036\uffce\001\002\000\022\003\047\031\020\032\042" +
    "\037\051\042\044\047\040\050\046\052\050\001\002\000" +
    "\012\002\uffd4\006\uffd4\035\uffd4\036\uffd4\001\002\000\006" +
    "\006\uffd2\036\uffd2\001\002\000\004\004\145\001\002\000" +
    "\004\005\uffc9\001\002\000\004\005\147\001\002\000\010" +
    "\006\uffcb\035\uffcb\036\uffcb\001\002\000\004\034\151\001" +
    "\002\000\022\003\047\031\020\032\042\037\051\042\044" +
    "\047\040\050\046\052\050\001\002\000\010\006\uffd1\035" +
    "\uffd1\036\uffd1\001\002\000\004\006\uffeb\001\002\000\004" +
    "\015\162\001\002\000\004\006\161\001\002\000\020\003" +
    "\153\031\ufff8\033\ufff8\041\ufff8\045\ufff8\046\ufff8\052\154" +
    "\001\002\000\004\006\160\001\002\000\020\003\uffed\031" +
    "\uffed\033\uffed\041\uffed\045\uffed\046\uffed\052\uffed\001\002" +
    "\000\020\003\uffee\031\uffee\033\uffee\041\uffee\045\uffee\046" +
    "\uffee\052\uffee\001\002\000\016\003\173\012\033\026\172" +
    "\043\171\052\174\053\031\001\002\000\004\006\uffec\001" +
    "\002\000\004\006\uffe8\001\002\000\004\006\uffea\001\002" +
    "\000\004\023\207\001\002\000\004\006\uffe7\001\002\000" +
    "\004\006\uffe9\001\002\000\006\036\uffe1\052\200\001\002" +
    "\000\004\052\076\001\002\000\006\006\uffe6\023\uffef\001" +
    "\002\000\006\006\uffe5\023\ufff0\001\002\000\004\006\uffe2" +
    "\001\002\000\004\036\206\001\002\000\006\006\uffdf\036" +
    "\uffdf\001\002\000\004\007\204\001\002\000\006\006\202" +
    "\036\uffe0\001\002\000\004\052\200\001\002\000\006\006" +
    "\uffde\036\uffde\001\002\000\004\052\076\001\002\000\006" +
    "\006\uffdd\036\uffdd\001\002\000\004\006\uffe3\001\002\000" +
    "\012\003\030\012\033\052\032\053\031\001\002\000\004" +
    "\006\uffe4\001\002\000\014\031\ufffa\033\ufffa\041\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\004\006\uffd8\001\002\000\014" +
    "\031\ufffc\033\ufffc\041\ufffc\045\ufffc\046\ufffc\001\002\000" +
    "\004\006\uffd9\001\002\000\020\003\214\031\ufff7\033\ufff7" +
    "\041\ufff7\045\ufff7\046\ufff7\052\217\001\002\000\004\006" +
    "\222\001\002\000\004\007\220\001\002\000\004\052\076" +
    "\001\002\000\004\006\uffda\001\002\000\020\003\uffdc\031" +
    "\uffdc\033\uffdc\041\uffdc\045\uffdc\046\uffdc\052\uffdc\001\002" +
    "\000\004\006\224\001\002\000\020\003\uffdb\031\uffdb\033" +
    "\uffdb\041\uffdb\045\uffdb\046\uffdb\052\uffdb\001\002\000\006" +
    "\003\226\004\227\001\002\000\004\015\uffd6\001\002\000" +
    "\004\005\uffd5\001\002\000\004\005\231\001\002\000\004" +
    "\015\uffd7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\005\007\001\001" +
    "\000\002\001\001\000\012\006\014\026\013\027\015\034" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\214\024\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\155\013\154\001\001" +
    "\000\012\032\042\033\044\034\040\047\051\001\001\000" +
    "\006\007\022\010\024\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\025\060\035\147\036\056\037" +
    "\061\040\064\041\065\047\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\137\001" +
    "\001\000\002\001\001\000\014\025\060\037\136\040\064" +
    "\041\065\047\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\025\060\035\131\036\056\037\061\040\064" +
    "\041\065\047\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\025\060\035\062\036\056" +
    "\037\061\040\064\041\065\047\072\001\001\000\010\025" +
    "\060\041\127\047\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\114\045\112\001" +
    "\001\000\002\001\001\000\010\025\060\041\103\047\072" +
    "\001\001\000\004\046\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\076\001\001" +
    "\000\020\025\060\035\073\036\056\037\061\040\064\041" +
    "\065\047\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\060\041\102" +
    "\047\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\060\040\117\041\065\047\072\001\001\000\002\001\001" +
    "\000\014\025\060\037\116\040\064\041\065\047\072\001" +
    "\001\000\002\001\001\000\004\045\112\001\001\000\004" +
    "\046\101\001\001\000\024\025\060\035\122\036\056\037" +
    "\061\040\064\041\065\042\121\043\123\047\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\025\060\035\125\036\056\037\061\040\064\041\065" +
    "\047\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\133\034\040\047\051\001\001\000\002\001\001\000" +
    "\010\033\135\034\040\047\051\001\001\000\002\001\001" +
    "\000\004\045\112\001\001\000\002\001\001\000\010\033" +
    "\142\034\040\047\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\151\034\040\047\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\165\014\162\015\167\016\163" +
    "\017\166\025\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\175\021\200\022\176\001" +
    "\001\000\004\025\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\202" +
    "\001\001\000\002\001\001\000\004\025\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\207\001\001" +
    "\000\002\001\001\000\006\004\211\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java_CUP during parsing.
       They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Provides access to the current token position in the input stream */
    public int getCurrentTokenPosition( ) {
        return cur_token.left;
    }
    
    /** Override the default CUP syntax_error method with 
     * one that integrates in with better error reporting. */
    public void syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 syntax error", 
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
    /** Override the default CUP unrecovered_syntax_error method with 
     * one that integrates in with better error reporting.
     */
    public void unrecovered_syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 unrecovered syntax error",
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
       semantics actions associated with parsing rules. */
    /* These are the only global variables you should need. */
    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Symbol table is available globally.
     *  Its current scope corresponds to the procedure/main program 
     *  being processed.
     */
    SymbolTable symtab;
    
    /** Methods for reporting an error message.
     * @param posn gives the position in the program being compiled */
    private void error( String message, Position posn ) {
        errors.errorMessage( message, Severity.ERROR, posn );
    }
    /** @param posn in this case is an integer representing the character
     * position, starting from zero, in the source file. */
    private void error( String message, int posn ) {
        error( message, new Position( posn ) );
    }
    private void fatal( String message ) {
        errors.errorMessage( message, Severity.FATAL, Position.NO_POSITION );
    }


  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpList ::= ExpList COMMA Condition 
            {
              ExpNode.RecordFieldsNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode.RecordFieldsNode e = (ExpNode.RecordFieldsNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			e.add( c );
			RESULT = e;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ExpList",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpList ::= Condition 
            {
              ExpNode.RecordFieldsNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = new ExpNode.RecordFieldsNode( new Position( cleft ) );
			RESULT.add( c );
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ExpList",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RecordFields ::= ExpList 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode.RecordFieldsNode e = (ExpNode.RecordFieldsNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = e;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RecordFields",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RecordFields ::= 
            {
              ExpNode RESULT =null;
		
			RESULT = new ExpNode.RecordFieldsNode();	
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RecordFields",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= TypeIdentifier LCURLY RecordFields RCURLY 
            {
              ExpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode rf = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
    		RESULT = new ExpNode.RecordConstructorNode( new Position( typeleft ), type, rf );
    	
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= KW_NEW TypeIdentifier 
            {
              ExpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	// TODO
        	RESULT = new ExpNode.PointerConstructorNode( new Position( typeleft ), type );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            Position pos = new Position( nleft );
            RESULT = new ExpNode.ConstNode( pos, Type.INTEGER_TYPE, 
                                            n.intValue() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= MINUS Factor 
            {
              ExpNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            Position pos = new Position( opleft );
            RESULT = new ExpNode.UnaryOpNode( pos, UnaryOperator.NEG_OP, e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MulOp ::= DIVIDE 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MulOp ::= TIMES 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AddOp ::= MINUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AddOp ::= PLUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Relation ::= GEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Relation ::= GREATER 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Relation ::= LESS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Relation ::= LEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Relation ::= NEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Relation ::= EQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RelCondition ::= error 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode( new Position(eleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode( new Position( opleft ),
                op, e1, e2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LValue ::= LValue POINTER 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
        	// TODO
            RESULT = new ExpNode.PointerNode( new Position( lvalleft ), lval );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LValue ::= LValue PERIOD IDENTIFIER 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
    		RESULT = new ExpNode.RecordEntryNode( new Position( lvalleft ), lval, id ); 
    	
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.IdentifierNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ActualParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= error 
            {
              StatementNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode( new Position(pleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= KW_CALL IDENTIFIER LPAREN ActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new StatementNode.CallNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int rvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int rvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode( new Position(lvalleft),
                                            lval, rval );
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode( new Position(eleft), e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.AssignmentNode( new Position(lvalleft), 
                     lval, new ExpNode.ReadNode( new Position(rleft) ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode( new Position(cleft), c, s1, s2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode( new Position(cleft), c, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StatementList ::= StatementList SEMICOLON Statement 
            {
              StatementNode.ListNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.addStatement( s );
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatementList ::= Statement 
            {
              StatementNode.ListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.ListNode( new Position(sleft) );
            RESULT.addStatement(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormalParamList ::= 
            {
              Object RESULT =null;
		
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new SymEntry.ProcedureEntry( id, new Position( idleft ),
                            symtab.getCurrentScope() );
            RESULT.setLocalScope( symtab.newScope( RESULT ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN FormalParamList RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            Position pos = new Position(idleft);
            procEntry = symtab.addProcedure( id, pos );
            if( procEntry == null ) {
                error( id + " already declared", pos );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, 
                    pos, symtab.getCurrentScope() );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            procEntry.setLocalScope( symtab.newScope( procEntry ) );
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ProcedureDef ::= ProcedureHead EQUALS Block 
            {
              DeclNode.ProcedureNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		SymEntry.ProcedureEntry proc = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode b = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            b.setProcEntry( proc );
            symtab.leaveScope();
            RESULT = new DeclNode.ProcedureNode( proc, b );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDecl ::= IDENTIFIER COLON TypeIdentifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType( type );
            if( symtab.addVariable( id, pos, varType ) == null ) {
                error( id + " already declared", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclSeq ::= VarDeclSeq VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclSeq ::= VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= IDENTIFIER COLON TypeIdentifier 
            {
              Type.Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
		RESULT = new Type.Field( new Position( idleft), id, type );
	
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Field",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Fields ::= Fields SEMICOLON Field 
            {
              Type.RecordType RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		Type.RecordType fl = (Type.RecordType)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type.Field f = (Type.Field)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			fl.add( f );	
			RESULT = fl;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Fields",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Fields ::= Field 
            {
              Type.RecordType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type.Field f = (Type.Field)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = new Type.RecordType();
			RESULT.add( f );	
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Fields",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldList ::= Fields 
            {
              Type.RecordType RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type.RecordType fl = (Type.RecordType)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = fl;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FieldList",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldList ::= 
            {
              Type.RecordType RESULT =null;
		
            RESULT = new Type.RecordType();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FieldList",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PointerType ::= POINTER TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new Type.PointerType( type );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("PointerType",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RecordType ::= KW_RECORD FieldList KW_END 
            {
              Type RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Type.RecordType fl = (Type.RecordType)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = fl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RecordType",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SubrangeType ::= Constant RANGE Constant 
            {
              Type RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new Type.SubrangeType( lo, hi );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("SubrangeType",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point
            * the abstract syntax tree records the IDENTIFIER,
            * as well as the symbol table context to look up later.
            */
            RESULT = new Type.IdRefType( id, symtab.getCurrentScope(),
                                         new Position( idleft ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= error 
            {
              Type RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= PointerType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = type;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= RecordType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = type;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= SubrangeType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            if( symtab.addType( id, pos, type ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode( new Position( errleft ),
                                             symtab.getCurrentScope() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( idleft );
            RESULT = new ConstExp.ConstIdNode( pos, symtab.getCurrentScope(),
                                               id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( opleft );
            RESULT = new ConstExp.NegateNode( pos, symtab.getCurrentScope(), 
                                              c ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( nleft);
            RESULT = new ConstExp.NumberNode( pos, symtab.getCurrentScope(),
                                              Type.INTEGER_TYPE, n ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* The attribute idleft represents the position of the start
             * character of the IDENTIFIER token in the input stream.
             * The type Position wraps this to provide a level of abstraction
             * for positions in the input stream.
             */
            Position pos = new Position(idleft);
            /* addConstant returns null if id is already defined 
             * in the current scope */
            if( symtab.addConstant( id, pos, c ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef SEMICOLON 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              Tree.BlockNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new Tree.BlockNode( dl, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramHead ::= 
            {
              SymEntry.ProcedureEntry RESULT =null;
		
            // This action occurs before the whole program is recognised.
            /* Construct initial symbol table with current scope the 
             * predefined scope. */
            symtab = new SymbolTable();         
            SymEntry.ProcedureEntry proc = 
                symtab.addProcedure( "<Main>", Position.NO_POSITION );
            if( proc == null ) {
                fatal( "Could not add main program to symbol table" );
            }
            // Enter the scope for the main program
            proc.setLocalScope( symtab.newScope( proc ) );
            RESULT = proc;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProgramHead",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Tree.ProgramNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
               avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Tree.ProgramNode start_val = (Tree.ProgramNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramHead Block 
            {
              Tree.ProgramNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		SymEntry.ProcedureEntry proc = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode block = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            // This action is executed after the whole program 
            // has been recognised
            block.setProcEntry( proc );
            symtab.leaveScope();
            RESULT = new Tree.ProgramNode( symtab, block );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

