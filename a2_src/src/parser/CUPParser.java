
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 18 19:00:16 EST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import source.*;
import tree.Tree;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.BinaryOperator;
import tree.UnaryOperator;
import syms.*;
import syms.SymEntry.ProcedureEntry;
import machine.StackMachine;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 18 19:00:16 EST 2013
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\002\000\002\004\004\000\002\005\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\007\004\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\004\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\022" +
    "\003\000\002\015\005\000\002\016\002\000\002\017\004" +
    "\000\002\020\004\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\023\005\000\002\024\007\000\002" +
    "\024\005\000\002\025\002\000\002\031\005\000\002\027" +
    "\003\000\002\027\005\000\002\030\006\000\002\030\010" +
    "\000\002\030\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\005\000\002\030\007\000\002\030\003\000\002" +
    "\026\002\000\002\042\003\000\002\042\004\000\002\032" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\034\003\000\002\034\005\000\002\040\003\000\002\040" +
    "\003\000\002\035\003\000\002\035\005\000\002\041\003" +
    "\000\002\041\003\000\002\036\004\000\002\036\004\000" +
    "\002\036\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\016\003\005\031\ufffe\033\ufffe\041\ufffe\045" +
    "\ufffe\046\ufffe\001\002\000\004\002\205\001\002\000\004" +
    "\002\uffff\001\002\000\014\031\ufffa\033\ufffa\041\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\004\002\001\001\002\000\014" +
    "\031\020\033\021\041\011\045\017\046\013\001\002\000" +
    "\004\052\200\001\002\000\006\002\ufffd\006\ufffd\001\002" +
    "\000\006\003\170\052\172\001\002\000\004\006\166\001" +
    "\002\000\014\031\ufffb\033\ufffb\041\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\004\015\164\001\002\000\006\003\140\052" +
    "\141\001\002\000\022\003\047\031\020\032\041\037\052" +
    "\042\043\047\040\050\046\052\050\001\002\000\006\003" +
    "\022\052\024\001\002\000\004\006\ufff3\001\002\000\020" +
    "\003\022\031\ufff9\033\ufff9\041\ufff9\045\ufff9\046\ufff9\052" +
    "\024\001\002\000\004\015\027\001\002\000\004\006\026" +
    "\001\002\000\020\003\ufff6\031\ufff6\033\ufff6\041\ufff6\045" +
    "\ufff6\046\ufff6\052\ufff6\001\002\000\012\003\030\012\033" +
    "\052\032\053\031\001\002\000\006\006\uffef\023\uffef\001" +
    "\002\000\006\006\ufff2\023\ufff2\001\002\000\006\006\ufff0" +
    "\023\ufff0\001\002\000\012\003\030\012\033\052\032\053" +
    "\031\001\002\000\004\006\ufff4\001\002\000\006\006\ufff1" +
    "\023\ufff1\001\002\000\004\006\037\001\002\000\020\003" +
    "\ufff5\031\ufff5\033\ufff5\041\ufff5\045\ufff5\046\ufff5\052\ufff5" +
    "\001\002\000\020\003\062\004\064\011\060\012\053\040" +
    "\065\052\050\053\055\001\002\000\004\052\131\001\002" +
    "\000\010\006\uffd4\035\uffd4\036\uffd4\001\002\000\004\052" +
    "\050\001\002\000\006\006\125\036\126\001\002\000\006" +
    "\006\uffd8\036\uffd8\001\002\000\016\004\064\011\060\012" +
    "\053\040\065\052\050\053\055\001\002\000\010\006\uffcf" +
    "\035\uffcf\036\uffcf\001\002\000\046\005\uffcd\006\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\044\uffcd\001\002\000\006\010\122\026\067" +
    "\001\002\000\020\003\062\004\064\011\060\012\053\040" +
    "\065\052\050\053\055\001\002\000\016\004\064\011\060" +
    "\012\053\040\065\052\050\053\055\001\002\000\016\005" +
    "\uffcb\006\uffcb\034\uffcb\035\uffcb\036\uffcb\044\uffcb\001\002" +
    "\000\042\005\uffb6\006\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\044\uffb6\001\002\000\036\005" +
    "\uffca\006\uffca\011\111\012\105\015\115\016\107\017\106" +
    "\020\112\021\114\022\110\034\uffca\035\uffca\036\uffca\044" +
    "\uffca\001\002\000\004\044\101\001\002\000\016\004\064" +
    "\011\060\012\053\040\065\052\050\053\055\001\002\000" +
    "\042\005\uffc1\006\uffc1\011\uffc1\012\uffc1\013\075\014\074" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\044\uffc1\001\002\000\016\005\uffc8" +
    "\006\uffc8\034\uffc8\035\uffc8\036\uffc8\044\uffc8\001\002\000" +
    "\042\005\uffbd\006\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\044\uffbd\001\002\000\020\003\062" +
    "\004\064\011\060\012\053\040\065\052\050\053\055\001" +
    "\002\000\004\052\070\001\002\000\044\005\uffb5\006\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\026\067\034\uffb5\035\uffb5" +
    "\036\uffb5\044\uffb5\001\002\000\046\005\uffcc\006\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\026\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\044\uffcc\001\002\000\042\005\uffe5\006\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\044\uffe5\001\002\000\042\005\uffb4\006\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\034\uffb4\035\uffb4\036\uffb4\044\uffb4\001" +
    "\002\000\004\005\073\001\002\000\042\005\uffb7\006\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\044\uffb7\001\002\000\016\004\uffba\011\uffba\012\uffba\040" +
    "\uffba\052\uffba\053\uffba\001\002\000\016\004\uffbb\011\uffbb" +
    "\012\uffbb\040\uffbb\052\uffbb\053\uffbb\001\002\000\016\004" +
    "\064\011\060\012\053\040\065\052\050\053\055\001\002" +
    "\000\042\005\uffbc\006\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\044\uffbc\001\002\000\042\005" +
    "\uffb9\006\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\044\uffb9\001\002\000\022\003\047\031\020" +
    "\032\041\037\052\042\043\047\040\050\046\052\050\001" +
    "\002\000\004\035\103\001\002\000\022\003\047\031\020" +
    "\032\041\037\052\042\043\047\040\050\046\052\050\001" +
    "\002\000\010\006\uffd5\035\uffd5\036\uffd5\001\002\000\016" +
    "\004\uffbe\011\uffbe\012\uffbe\040\uffbe\052\uffbe\053\uffbe\001" +
    "\002\000\016\004\uffc5\011\uffc5\012\uffc5\040\uffc5\052\uffc5" +
    "\053\uffc5\001\002\000\016\004\uffc6\011\uffc6\012\uffc6\040" +
    "\uffc6\052\uffc6\053\uffc6\001\002\000\016\004\uffc3\011\uffc3" +
    "\012\uffc3\040\uffc3\052\uffc3\053\uffc3\001\002\000\016\004" +
    "\uffbf\011\uffbf\012\uffbf\040\uffbf\052\uffbf\053\uffbf\001\002" +
    "\000\016\004\uffc2\011\uffc2\012\uffc2\040\uffc2\052\uffc2\053" +
    "\uffc2\001\002\000\016\004\064\011\060\012\053\040\065" +
    "\052\050\053\055\001\002\000\016\004\uffc4\011\uffc4\012" +
    "\uffc4\040\uffc4\052\uffc4\053\uffc4\001\002\000\016\004\uffc7" +
    "\011\uffc7\012\uffc7\040\uffc7\052\uffc7\053\uffc7\001\002\000" +
    "\016\004\064\011\060\012\053\040\065\052\050\053\055" +
    "\001\002\000\022\005\uffc9\006\uffc9\011\111\012\105\034" +
    "\uffc9\035\uffc9\036\uffc9\044\uffc9\001\002\000\042\005\uffc0" +
    "\006\uffc0\011\uffc0\012\uffc0\013\075\014\074\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\044\uffc0\001\002\000\042\005\uffb8\006\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\034\uffb8\035\uffb8\036\uffb8\044" +
    "\uffb8\001\002\000\020\003\062\004\064\011\060\012\053" +
    "\040\065\052\050\053\055\001\002\000\010\006\uffd1\035" +
    "\uffd1\036\uffd1\001\002\000\014\006\uffd2\011\111\012\105" +
    "\035\uffd2\036\uffd2\001\002\000\022\003\047\031\020\032" +
    "\041\037\052\042\043\047\040\050\046\052\050\001\002" +
    "\000\012\002\uffd9\006\uffd9\035\uffd9\036\uffd9\001\002\000" +
    "\006\006\uffd7\036\uffd7\001\002\000\012\006\uffd3\026\067" +
    "\035\uffd3\036\uffd3\001\002\000\004\004\132\001\002\000" +
    "\004\005\uffce\001\002\000\004\005\134\001\002\000\010" +
    "\006\uffd0\035\uffd0\036\uffd0\001\002\000\004\034\136\001" +
    "\002\000\022\003\047\031\020\032\041\037\052\042\043" +
    "\047\040\050\046\052\050\001\002\000\010\006\uffd6\035" +
    "\uffd6\036\uffd6\001\002\000\004\006\uffeb\001\002\000\004" +
    "\015\147\001\002\000\004\006\146\001\002\000\020\003" +
    "\140\031\ufff8\033\ufff8\041\ufff8\045\ufff8\046\ufff8\052\141" +
    "\001\002\000\004\006\145\001\002\000\020\003\uffed\031" +
    "\uffed\033\uffed\041\uffed\045\uffed\046\uffed\052\uffed\001\002" +
    "\000\020\003\uffee\031\uffee\033\uffee\041\uffee\045\uffee\046" +
    "\uffee\052\uffee\001\002\000\016\003\157\006\uffe3\012\033" +
    "\026\156\052\160\053\031\001\002\000\004\006\uffec\001" +
    "\002\000\004\006\uffe8\001\002\000\004\006\uffea\001\002" +
    "\000\004\023\162\001\002\000\004\006\uffe7\001\002\000" +
    "\004\006\uffe9\001\002\000\004\052\070\001\002\000\006" +
    "\006\uffe6\023\uffef\001\002\000\006\006\uffe5\023\ufff0\001" +
    "\002\000\004\006\uffe2\001\002\000\012\003\030\012\033" +
    "\052\032\053\031\001\002\000\004\006\uffe4\001\002\000" +
    "\014\031\ufffa\033\ufffa\041\ufffa\045\ufffa\046\ufffa\001\002" +
    "\000\004\006\uffdd\001\002\000\014\031\ufffc\033\ufffc\041" +
    "\ufffc\045\ufffc\046\ufffc\001\002\000\020\003\170\031\ufff7" +
    "\033\ufff7\041\ufff7\045\ufff7\046\ufff7\052\172\001\002\000" +
    "\004\006\uffde\001\002\000\004\006\175\001\002\000\004" +
    "\007\173\001\002\000\004\052\070\001\002\000\004\006" +
    "\uffdf\001\002\000\020\003\uffe1\031\uffe1\033\uffe1\041\uffe1" +
    "\045\uffe1\046\uffe1\052\uffe1\001\002\000\004\006\177\001" +
    "\002\000\020\003\uffe0\031\uffe0\033\uffe0\041\uffe0\045\uffe0" +
    "\046\uffe0\052\uffe0\001\002\000\006\003\201\004\202\001" +
    "\002\000\004\015\uffdb\001\002\000\004\005\uffda\001\002" +
    "\000\004\005\204\001\002\000\004\015\uffdc\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\005\007\001\001" +
    "\000\002\001\001\000\012\006\014\023\013\024\015\031" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\166\021\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\142\013\141\001\001" +
    "\000\012\027\043\030\044\031\041\042\050\001\001\000" +
    "\006\007\022\010\024\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\134\033\053\034\055\035" +
    "\060\036\062\042\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\123\035\060\036\062\042\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\032\056\033\053\034\055\035\060\036\062" +
    "\042\065\001\001\000\006\036\120\042\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\115\040\112" +
    "\001\001\000\002\001\001\000\006\036\077\042\065\001" +
    "\001\000\004\041\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\071\033\053\034\055\035\060\036" +
    "\062\042\065\001\001\000\004\022\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\076\042\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\101\031\041" +
    "\042\050\001\001\000\002\001\001\000\010\030\103\031" +
    "\041\042\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\117\036\062" +
    "\042\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\116\035\060\036\062\042\065\001\001\000\004" +
    "\040\112\001\001\000\004\041\075\001\001\000\002\001" +
    "\001\000\016\032\122\033\053\034\055\035\060\036\062" +
    "\042\065\001\001\000\002\001\001\000\004\040\112\001" +
    "\001\000\010\030\126\031\041\042\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\136\031\041\042" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\152\014\147\015\154\016\150\017\153\022\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\162\001\001\000\002\001" +
    "\001\000\006\004\164\005\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java_CUP during parsing.
       They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Provides access to the current token position in the input stream */
    public int getCurrentTokenPosition( ) {
        return cur_token.left;
    }
    
    /** Override the default CUP syntax_error method with 
     * one that integrates in with better error reporting. */
    public void syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 syntax error", 
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
    /** Override the default CUP unrecovered_syntax_error method with 
     * one that integrates in with better error reporting.
     */
    public void unrecovered_syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 unrecovered syntax error",
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
       semantics actions associated with parsing rules. */
    /* These are the only global variables you should need. */
    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Symbol table is available globally.
     *  Its current scope corresponds to the procedure/main program 
     *  being processed.
     */
    SymbolTable symtab;
    
    /** Methods for reporting an error message.
     * @param posn gives the position in the program being compiled */
    private void error( String message, Position posn ) {
        errors.errorMessage( message, Severity.ERROR, posn );
    }
    /** @param posn in this case is an integer representing the character
     * position, starting from zero, in the source file. */
    private void error( String message, int posn ) {
        error( message, new Position( posn ) );
    }
    private void fatal( String message ) {
        errors.errorMessage( message, Severity.FATAL, Position.NO_POSITION );
    }


  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Factor ::= KW_NEW TypeIdentifier 
            {
              ExpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.IdentifierNode( new Position(typeleft), type );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            Position pos = new Position( nleft );
            RESULT = new ExpNode.ConstNode( pos, Type.INTEGER_TYPE, 
                                            n.intValue() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= MINUS Factor 
            {
              ExpNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            Position pos = new Position( opleft );
            RESULT = new ExpNode.UnaryOpNode( pos, UnaryOperator.NEG_OP, e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MulOp ::= DIVIDE 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MulOp ::= TIMES 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AddOp ::= MINUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AddOp ::= PLUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Relation ::= GEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Relation ::= GREATER 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Relation ::= LESS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Relation ::= LEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Relation ::= NEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Relation ::= EQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelCondition ::= error 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode( new Position(eleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode( new Position( opleft ),
                op, e1, e2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LValue ::= LValue POINTER 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new ExpNode.DereferenceNode( new Position (lvalleft), lval );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.IdentifierNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ActualParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= error 
            {
              StatementNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode( new Position(pleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= KW_CALL IDENTIFIER LPAREN ActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new StatementNode.CallNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int rvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int rvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode( new Position(lvalleft),
                                            lval, rval );
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode( new Position(eleft), e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.AssignmentNode( new Position(lvalleft), 
                     lval, new ExpNode.ReadNode( new Position(rleft) ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode( new Position(cleft), c, s1, s2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode( new Position(cleft), c, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementList ::= StatementList SEMICOLON Statement 
            {
              StatementNode.ListNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.addStatement( s );
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= Statement 
            {
              StatementNode.ListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.ListNode( new Position(sleft) );
            RESULT.addStatement(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParamList ::= 
            {
              Object RESULT =null;
		
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new SymEntry.ProcedureEntry( id, new Position( idleft ),
                            symtab.getCurrentScope() );
            RESULT.setLocalScope( symtab.newScope( RESULT ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN FormalParamList RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            Position pos = new Position(idleft);
            procEntry = symtab.addProcedure( id, pos );
            if( procEntry == null ) {
                error( id + " already declared", pos );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, 
                    pos, symtab.getCurrentScope() );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            procEntry.setLocalScope( symtab.newScope( procEntry ) );
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcedureDef ::= ProcedureHead EQUALS Block 
            {
              DeclNode.ProcedureNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		SymEntry.ProcedureEntry proc = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode b = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            b.setProcEntry( proc );
            symtab.leaveScope();
            RESULT = new DeclNode.ProcedureNode( proc, b );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarDecl ::= IDENTIFIER COLON TypeIdentifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType( type );
            if( symtab.addVariable( id, pos, varType ) == null ) {
                error( id + " already declared", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarDeclSeq ::= VarDeclSeq VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarDeclSeq ::= VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PointerType ::= POINTER TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	// TODO
        	System.out.println("recognized PointerType");
            RESULT = new Type.PointerType( type );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("PointerType",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RecordType ::= 
            {
              Type RESULT =null;
		
        	// TODO
        	System.out.println("recognized RecordType");
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RecordType",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SubrangeType ::= Constant RANGE Constant 
            {
              Type RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	System.out.println("recognized SubrangeType");
            RESULT = new Type.SubrangeType( lo, hi );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("SubrangeType",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point
            * the abstract syntax tree records the IDENTIFIER,
            * as well as the symbol table context to look up later.
            */
            RESULT = new Type.IdRefType( id, symtab.getCurrentScope(),
                                         new Position( idleft ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= error 
            {
              Type RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= PointerType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			// TODO
            RESULT = type;
        	System.out.println("Type -> PointerType");
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= RecordType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			// TODO	
            RESULT = type;
        	System.out.println("Type -> RecordType");
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= SubrangeType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            if( symtab.addType( id, pos, type ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode( new Position( errleft ),
                                             symtab.getCurrentScope() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( idleft );
            RESULT = new ConstExp.ConstIdNode( pos, symtab.getCurrentScope(),
                                               id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( opleft );
            RESULT = new ConstExp.NegateNode( pos, symtab.getCurrentScope(), 
                                              c ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position( nleft);
            RESULT = new ConstExp.NumberNode( pos, symtab.getCurrentScope(),
                                              Type.INTEGER_TYPE, n ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* The attribute idleft represents the position of the start
             * character of the IDENTIFIER token in the input stream.
             * The type Position wraps this to provide a level of abstraction
             * for positions in the input stream.
             */
            Position pos = new Position(idleft);
            /* addConstant returns null if id is already defined 
             * in the current scope */
            if( symtab.addConstant( id, pos, c ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              DeclNode RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef SEMICOLON 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              Tree.BlockNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new Tree.BlockNode( dl, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramHead ::= 
            {
              SymEntry.ProcedureEntry RESULT =null;
		
            // This action occurs before the whole program is recognised.
            /* Construct initial symbol table with current scope the 
             * predefined scope. */
            symtab = new SymbolTable();         
            SymEntry.ProcedureEntry proc = 
                symtab.addProcedure( "<Main>", Position.NO_POSITION );
            if( proc == null ) {
                fatal( "Could not add main program to symbol table" );
            }
            // Enter the scope for the main program
            proc.setLocalScope( symtab.newScope( proc ) );
            RESULT = proc;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProgramHead",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Tree.ProgramNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
               avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Tree.ProgramNode start_val = (Tree.ProgramNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramHead Block 
            {
              Tree.ProgramNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		SymEntry.ProcedureEntry proc = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode block = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            // This action is executed after the whole program 
            // has been recognised
            block.setProcEntry( proc );
            symtab.leaveScope();
            RESULT = new Tree.ProgramNode( symtab, block );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

