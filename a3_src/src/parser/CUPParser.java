
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 21 13:52:29 EST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import source.*;
import tree.Tree;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.BinaryOperator;
import tree.UnaryOperator;
import syms.*;
import syms.SymEntry.ProcedureEntry;
import machine.StackMachine;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 21 13:52:29 EST 2013
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\002\000\002\004\004\000\002\005\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\007\004\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\004\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\020\003\000\002\015\005\000\002\016" +
    "\004\000\002\016\005\000\002\017\005\000\002\017\003" +
    "\000\002\021\005\000\002\022\007\000\002\022\006\000" +
    "\002\022\005\000\002\025\006\000\002\025\005\000\002" +
    "\023\003\000\002\023\005\000\002\031\005\000\002\027" +
    "\003\000\002\027\005\000\002\030\006\000\002\030\010" +
    "\000\002\030\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\005\000\002\030\007\000\002\030\006\000\002" +
    "\030\003\000\002\026\003\000\002\024\003\000\002\024" +
    "\005\000\002\042\003\000\002\032\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\034\003\000\002\034" +
    "\005\000\002\040\003\000\002\040\003\000\002\035\003" +
    "\000\002\035\005\000\002\041\003\000\002\041\003\000" +
    "\002\036\004\000\002\036\004\000\002\036\005\000\002" +
    "\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\016\003\005\025\ufffe\027\ufffe\034\ufffe\040" +
    "\ufffe\041\ufffe\001\002\000\004\002\216\001\002\000\004" +
    "\002\uffff\001\002\000\014\025\ufffa\027\ufffa\034\ufffa\040" +
    "\ufffa\041\ufffa\001\002\000\004\002\001\001\002\000\014" +
    "\025\020\027\021\034\011\040\017\041\013\001\002\000" +
    "\004\045\176\001\002\000\006\002\ufffd\006\ufffd\001\002" +
    "\000\006\003\164\045\167\001\002\000\004\006\163\001" +
    "\002\000\014\025\ufffb\027\ufffb\034\ufffb\040\ufffb\041\ufffb" +
    "\001\002\000\004\015\161\001\002\000\006\003\141\045" +
    "\142\001\002\000\022\003\047\025\020\026\042\033\051" +
    "\035\043\042\040\043\046\045\050\001\002\000\006\003" +
    "\022\045\024\001\002\000\004\006\ufff3\001\002\000\020" +
    "\003\022\025\ufff9\027\ufff9\034\ufff9\040\ufff9\041\ufff9\045" +
    "\024\001\002\000\004\015\027\001\002\000\004\006\026" +
    "\001\002\000\020\003\ufff6\025\ufff6\027\ufff6\034\ufff6\040" +
    "\ufff6\041\ufff6\045\ufff6\001\002\000\012\003\030\012\033" +
    "\045\032\046\031\001\002\000\006\006\uffef\023\uffef\001" +
    "\002\000\006\006\ufff2\023\ufff2\001\002\000\006\006\ufff0" +
    "\023\ufff0\001\002\000\012\003\030\012\033\045\032\046" +
    "\031\001\002\000\004\006\ufff4\001\002\000\006\006\ufff1" +
    "\023\ufff1\001\002\000\004\006\037\001\002\000\020\003" +
    "\ufff5\025\ufff5\027\ufff5\034\ufff5\040\ufff5\041\ufff5\045\ufff5" +
    "\001\002\000\016\003\064\004\065\011\061\012\054\045" +
    "\050\046\056\001\002\000\010\006\uffd4\031\uffd4\032\uffd4" +
    "\001\002\000\004\045\125\001\002\000\004\045\050\001" +
    "\002\000\006\006\121\032\122\001\002\000\006\006\uffd8" +
    "\032\uffd8\001\002\000\014\004\065\011\061\012\054\045" +
    "\050\046\056\001\002\000\010\006\uffce\031\uffce\032\uffce" +
    "\001\002\000\046\005\uffca\006\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\024\uffca\030\uffca\031\uffca\032\uffca\037" +
    "\uffca\001\002\000\016\003\064\004\065\011\061\012\054" +
    "\045\050\046\056\001\002\000\004\010\053\001\002\000" +
    "\016\003\064\004\065\011\061\012\054\045\050\046\056" +
    "\001\002\000\014\004\065\011\061\012\054\045\050\046" +
    "\056\001\002\000\020\005\uffc9\006\uffc9\024\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\037\uffc9\001\002\000\044\005\uffb4\006" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\024\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\037\uffb4\001\002\000\040\005\uffc8\006\uffc8" +
    "\011\102\012\076\015\107\016\100\017\077\020\103\021" +
    "\105\022\101\024\uffc8\030\uffc8\031\uffc8\032\uffc8\037\uffc8" +
    "\001\002\000\010\006\uffd1\031\uffd1\032\uffd1\001\002\000" +
    "\014\004\065\011\061\012\054\045\050\046\056\001\002" +
    "\000\044\005\uffbf\006\uffbf\011\uffbf\012\uffbf\013\072\014" +
    "\071\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\030\uffbf\031\uffbf\032\uffbf\037\uffbf\001\002\000" +
    "\044\005\uffbb\006\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\037\uffbb\001\002\000\020" +
    "\005\uffc6\006\uffc6\024\uffc6\030\uffc6\031\uffc6\032\uffc6\037" +
    "\uffc6\001\002\000\016\003\064\004\065\011\061\012\054" +
    "\045\050\046\056\001\002\000\044\005\uffb3\006\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\024\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\037\uffb3\001\002\000\004\005\070\001\002\000\044" +
    "\005\uffb5\006\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\037\uffb5\001\002\000\014\004" +
    "\uffb8\011\uffb8\012\uffb8\045\uffb8\046\uffb8\001\002\000\014" +
    "\004\uffb9\011\uffb9\012\uffb9\045\uffb9\046\uffb9\001\002\000" +
    "\014\004\065\011\061\012\054\045\050\046\056\001\002" +
    "\000\044\005\uffba\006\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\024\uffba\030\uffba\031\uffba\032\uffba\037\uffba\001\002\000" +
    "\044\005\uffb7\006\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\037\uffb7\001\002\000\014" +
    "\004\uffbc\011\uffbc\012\uffbc\045\uffbc\046\uffbc\001\002\000" +
    "\014\004\uffc3\011\uffc3\012\uffc3\045\uffc3\046\uffc3\001\002" +
    "\000\014\004\uffc4\011\uffc4\012\uffc4\045\uffc4\046\uffc4\001" +
    "\002\000\014\004\uffc1\011\uffc1\012\uffc1\045\uffc1\046\uffc1" +
    "\001\002\000\014\004\uffbd\011\uffbd\012\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\014\004\uffc0\011\uffc0\012\uffc0\045\uffc0" +
    "\046\uffc0\001\002\000\014\004\065\011\061\012\054\045" +
    "\050\046\056\001\002\000\014\004\uffc2\011\uffc2\012\uffc2" +
    "\045\uffc2\046\uffc2\001\002\000\014\004\065\011\061\012" +
    "\054\045\050\046\056\001\002\000\014\004\uffc5\011\uffc5" +
    "\012\uffc5\045\uffc5\046\uffc5\001\002\000\024\005\uffc7\006" +
    "\uffc7\011\102\012\076\024\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\037\uffc7\001\002\000\044\005\uffbe\006\uffbe\011\uffbe\012" +
    "\uffbe\013\072\014\071\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\024\uffbe\030\uffbe\031\uffbe\032\uffbe\037" +
    "\uffbe\001\002\000\044\005\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\024\uffb6\030\uffb6\031\uffb6\032\uffb6\037\uffb6" +
    "\001\002\000\004\037\114\001\002\000\022\003\047\025" +
    "\020\026\042\033\051\035\043\042\040\043\046\045\050" +
    "\001\002\000\004\031\116\001\002\000\022\003\047\025" +
    "\020\026\042\033\051\035\043\042\040\043\046\045\050" +
    "\001\002\000\010\006\uffd5\031\uffd5\032\uffd5\001\002\000" +
    "\014\006\uffd2\011\102\012\076\031\uffd2\032\uffd2\001\002" +
    "\000\022\003\047\025\020\026\042\033\051\035\043\042" +
    "\040\043\046\045\050\001\002\000\012\002\uffd9\006\uffd9" +
    "\031\uffd9\032\uffd9\001\002\000\006\006\uffd7\032\uffd7\001" +
    "\002\000\010\006\uffd3\031\uffd3\032\uffd3\001\002\000\004" +
    "\004\126\001\002\000\020\003\064\004\065\005\131\011" +
    "\061\012\054\045\050\046\056\001\002\000\006\005\uffcd" +
    "\024\uffcd\001\002\000\006\005\uffcc\024\uffcc\001\002\000" +
    "\010\006\uffcf\031\uffcf\032\uffcf\001\002\000\006\005\134" +
    "\024\133\001\002\000\016\003\064\004\065\011\061\012" +
    "\054\045\050\046\056\001\002\000\010\006\uffd0\031\uffd0" +
    "\032\uffd0\001\002\000\006\005\uffcb\024\uffcb\001\002\000" +
    "\004\030\137\001\002\000\022\003\047\025\020\026\042" +
    "\033\051\035\043\042\040\043\046\045\050\001\002\000" +
    "\010\006\uffd6\031\uffd6\032\uffd6\001\002\000\004\006\uffeb" +
    "\001\002\000\004\015\150\001\002\000\004\006\147\001" +
    "\002\000\020\003\141\025\ufff8\027\ufff8\034\ufff8\040\ufff8" +
    "\041\ufff8\045\142\001\002\000\004\006\146\001\002\000" +
    "\020\003\uffed\025\uffed\027\uffed\034\uffed\040\uffed\041\uffed" +
    "\045\uffed\001\002\000\020\003\uffee\025\uffee\027\uffee\034" +
    "\uffee\040\uffee\041\uffee\045\uffee\001\002\000\012\003\152" +
    "\012\033\045\154\046\031\001\002\000\004\006\uffec\001" +
    "\002\000\006\006\uffe8\023\uffef\001\002\000\004\023\157" +
    "\001\002\000\006\006\uffe7\023\ufff0\001\002\000\004\006" +
    "\uffe9\001\002\000\004\006\uffea\001\002\000\012\003\030" +
    "\012\033\045\032\046\031\001\002\000\004\006\uffe6\001" +
    "\002\000\014\025\ufffa\027\ufffa\034\ufffa\040\ufffa\041\ufffa" +
    "\001\002\000\004\006\uffe1\001\002\000\014\025\ufffc\027" +
    "\ufffc\034\ufffc\040\ufffc\041\ufffc\001\002\000\004\006\uffe2" +
    "\001\002\000\020\003\164\025\ufff7\027\ufff7\034\ufff7\040" +
    "\ufff7\041\ufff7\045\167\001\002\000\004\006\173\001\002" +
    "\000\004\007\170\001\002\000\004\045\171\001\002\000" +
    "\010\005\uffe7\006\uffe7\024\uffe7\001\002\000\004\006\uffe3" +
    "\001\002\000\020\003\uffe5\025\uffe5\027\uffe5\034\uffe5\040" +
    "\uffe5\041\uffe5\045\uffe5\001\002\000\004\006\175\001\002" +
    "\000\020\003\uffe4\025\uffe4\027\uffe4\034\uffe4\040\uffe4\041" +
    "\uffe4\045\uffe4\001\002\000\006\003\177\004\200\001\002" +
    "\000\004\015\uffde\001\002\000\010\005\202\036\201\045" +
    "\205\001\002\000\004\045\213\001\002\000\004\015\uffdf" +
    "\001\002\000\006\005\uffdb\024\uffdb\001\002\000\006\005" +
    "\211\024\210\001\002\000\004\007\206\001\002\000\004" +
    "\045\171\001\002\000\006\005\uffdc\024\uffdc\001\002\000" +
    "\006\036\201\045\205\001\002\000\004\015\uffe0\001\002" +
    "\000\006\005\uffda\024\uffda\001\002\000\004\007\214\001" +
    "\002\000\004\045\171\001\002\000\006\005\uffdd\024\uffdd" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\005\007\001\001" +
    "\000\002\001\001\000\012\006\014\021\013\022\015\031" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\164\017\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\143\013\142\001\001" +
    "\000\012\027\043\030\044\031\040\042\051\001\001\000" +
    "\006\007\022\010\024\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\135\033\054\034\056\035" +
    "\061\036\062\042\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\117\035\061\036\062\042\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\032" +
    "\112\033\054\034\056\035\061\036\062\042\065\001\001" +
    "\000\002\001\001\000\016\032\057\033\054\034\056\035" +
    "\061\036\062\042\065\001\001\000\006\036\111\042\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\105\040\103\001\001\000\002\001\001\000\006\036\074" +
    "\042\065\001\001\000\004\041\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\066\033\054\034\056" +
    "\035\061\036\062\042\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\073\042\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\110\036\062\042\065\001\001" +
    "\000\002\001\001\000\012\034\107\035\061\036\062\042" +
    "\065\001\001\000\002\001\001\000\004\040\103\001\001" +
    "\000\004\041\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\114\031\040\042\051\001\001\000\002" +
    "\001\001\000\010\030\116\031\040\042\051\001\001\000" +
    "\002\001\001\000\004\040\103\001\001\000\010\030\122" +
    "\031\040\042\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\131" +
    "\026\127\032\126\033\054\034\056\035\061\036\062\042" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\026\134\032\126\033" +
    "\054\034\056\035\061\036\062\042\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\137\031\040\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\152\014\150\015\154\020\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\157\001\001\000\002\001\001\000\006\004\161" +
    "\005\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\203\025\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\206\001\001\000\002\001\001\000\004" +
    "\025\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\214\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java_CUP during parsing.
       They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Provides access to the current token position in the input stream */
    public int getCurrentTokenPosition( ) {
        return cur_token.left;
    }
    
    /** Override the default CUP syntax_error method with 
     * one that integrates in with better error reporting. */
    public void syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 syntax error", 
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
    /** Override the default CUP unrecovered_syntax_error method with 
     * one that integrates in with better error reporting.
     */
    public void unrecovered_syntax_error( Symbol cur_token ) {
        errors.errorMessage( "PL0 unrecovered syntax error",
            Severity.ERROR, new Position( getCurrentTokenPosition() ) );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
       semantics actions associated with parsing rules. */
    /* These are the only global variables you should need. */
    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Symbol table is available globally.
     *  Its current scope corresponds to the procedure/main program 
     *  being processed.
     */
    SymbolTable symtab;
    
    /** Methods for reporting an error message.
     * @param posn gives the position in the program being compiled */
    private void error( String message, Position posn ) {
        errors.errorMessage( message, Severity.ERROR, posn );
    }
    /** @param posn in this case is an integer representing the character
     * position, starting from zero, in the source file. */
    private void error( String message, int posn ) {
        error( message, new Position( posn ) );
    }
    private void fatal( String message ) {
        errors.errorMessage( message, Severity.FATAL, Position.NO_POSITION );
    }


  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ConstNode( new Position( nleft ), 
                    Type.INTEGER_TYPE, n.intValue() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= MINUS Factor 
            {
              ExpNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.UnaryOpNode( new Position( opleft ), 
                        UnaryOperator.NEG_OP, e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MulOp ::= DIVIDE 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MulOp ::= TIMES 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AddOp ::= MINUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AddOp ::= PLUS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode(new Position(opleft),op,e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Relation ::= GEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Relation ::= GREATER 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Relation ::= LESS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Relation ::= LEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Relation ::= NEQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Relation ::= EQUALS 
            {
              BinaryOperator RESULT =null;
		
            RESULT = BinaryOperator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelCondition ::= error 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode( new Position(eleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryOpNode( new Position( opleft ),
                op, e1, e2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.IdentifierNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ActualParamList ::= ActualParamList COMMA ActualParam 
            {
              ExpNode.ActualParamListNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode.ActualParamListNode pl = (ExpNode.ActualParamListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode.ActualParamNode p = (ExpNode.ActualParamNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			pl.addActualParam(p);
			RESULT = pl;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ActualParamList ::= ActualParam 
            {
              ExpNode.ActualParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode.ActualParamNode p = (ExpNode.ActualParamNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	RESULT = new ExpNode.ActualParamListNode(new Position(pleft));
        	RESULT.addActualParam(p);
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ActualParam ::= Condition 
            {
              ExpNode.ActualParamNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = new ExpNode.ActualParamNode(new Position(cleft), c);
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParam",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= error 
            {
              StatementNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode( new Position(pleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= KW_CALL IDENTIFIER LPAREN RPAREN 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		 
        	ExpNode.ActualParamListNode emptyParamList = 
        		new ExpNode.ActualParamListNode(new Position(idleft));
            RESULT = new StatementNode.CallNode( new Position(idleft), id, emptyParamList );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= KW_CALL IDENTIFIER LPAREN ActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode.ActualParamListNode pl = (ExpNode.ActualParamListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new StatementNode.CallNode( new Position(idleft), id, pl );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int rvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int rvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode( new Position(lvalleft),
                                            lval, rval );
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode( new Position(eleft), e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.AssignmentNode( new Position(lvalleft), 
                     lval, new ExpNode.ReadNode( new Position(rleft) ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode( new Position(cleft), c, s1, s2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode( new Position(cleft), c, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementList ::= StatementList SEMICOLON Statement 
            {
              StatementNode.ListNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.addStatement( s );
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= Statement 
            {
              StatementNode.ListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.ListNode( new Position(sleft) );
            RESULT.addStatement(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParamList ::= FormalParamList COMMA FormalParam 
            {
              ExpNode.FormalParamListNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode.FormalParamListNode pl = (ExpNode.FormalParamListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode.FormalParamNode p = (ExpNode.FormalParamNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			pl.addFormalParam(p);
			RESULT = pl;
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParamList ::= FormalParam 
            {
              ExpNode.FormalParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode.FormalParamNode p = (ExpNode.FormalParamNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	RESULT = new ExpNode.FormalParamListNode(new Position(pleft));
        	RESULT.addFormalParam(p);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParam ::= IDENTIFIER COLON TypeIdentifier 
            {
              ExpNode.FormalParamNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = new ExpNode.FormalParamNode(new Position(idleft), id, type, false);
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParam ::= KW_REF IDENTIFIER COLON TypeIdentifier 
            {
              ExpNode.FormalParamNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
			RESULT = new ExpNode.FormalParamNode(new Position(idleft), id, type, true);
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new SymEntry.ProcedureEntry( id, new Position( idleft ),
                            symtab.getCurrentScope() );
            RESULT.setLocalScope( symtab.newScope() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            Position pos = new Position(idleft);
            procEntry = symtab.addProcedure( id, pos );
            if( procEntry == null ) {
                error( id + " already declared", pos );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, 
                    pos, symtab.getCurrentScope() );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            procEntry.setLocalScope( symtab.newScope() );
            RESULT = procEntry;
    	
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN FormalParamList RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode.FormalParamListNode pl = (ExpNode.FormalParamListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            Position pos = new Position(idleft);
            procEntry = symtab.addProcedure( id, pos );
            if( procEntry == null ) {
                error( id + " already declared", pos );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, 
                    pos, symtab.getCurrentScope() );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            Scope scope = symtab.newScope();
           	
           	SymEntry.ParamEntry entry; 
           	List<SymEntry.ParamEntry> procEntries = new ArrayList<SymEntry.ParamEntry>(); 
           
			for (ExpNode.FormalParamNode paramNode : pl.getFormalParams()) {
				String paramId = paramNode.getId();
				Position paramPos = paramNode.getPosition();
				Type.ReferenceType paramType = 
					new Type.ReferenceType(paramNode.getParamType().resolveType(paramPos));
					
				if (paramNode.isRef()) {
					entry = new SymEntry.RefParamEntry(paramId, paramPos, scope, paramType);		
				} else {
					entry = new SymEntry.ParamEntry(paramId, paramPos, scope, paramType);		
				} 
				
				int offset = scope.allocParameterSpace(paramType.getSpace());
				entry.setOffset(offset);
				
				if (scope.addEntry(entry) == null) {
					error("Duplicate parameter", paramPos);	
				}	
				
				procEntries.add(entry);
			}
			
			procEntry.getType().setParams(procEntries); 
            procEntry.setLocalScope( scope );
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcedureDef ::= ProcedureHead EQUALS Block 
            {
              DeclNode.ProcedureNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		SymEntry.ProcedureEntry proc = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode b = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            b.setBlockLocals( proc.getLocalScope() );
            symtab.leaveScope();
            RESULT = new DeclNode.ProcedureNode( proc, b );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDecl ::= IDENTIFIER COLON TypeIdentifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType( type );
            if( symtab.addVariable( id, pos, varType ) == null ) {
                error( id + " already declared", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDeclSeq ::= VarDeclSeq VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclSeq ::= VarDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SubrangeType ::= Constant RANGE Constant 
            {
              Type RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new Type.SubrangeType( lo, hi );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("SubrangeType",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point
            * the abstract syntax tree records the IDENTIFIER,
            * as well as the symbol table context to look up later.
            */
            RESULT = new Type.IdRefType( id, symtab.getCurrentScope(),
                                         new Position( idleft ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= error 
            {
              Type RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= SubrangeType 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            Position pos = new Position(idleft);
            if( symtab.addType( id, pos, type ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode( new Position( errleft ),
                                             symtab.getCurrentScope() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.ConstIdNode( new Position( idleft ), 
                    symtab.getCurrentScope(), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NegateNode( new Position( opleft ), 
                    symtab.getCurrentScope(), c ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NumberNode( new Position( nleft), 
                    symtab.getCurrentScope(), Type.INTEGER_TYPE, n ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* The attribute idleft represents the position of the start
             * character of the IDENTIFIER token in the input stream.
             * The class Position wraps this to provide a level of abstraction
             * for positions in the input stream.
             */
            Position pos = new Position(idleft);
            /* addConstant returns null if id is already defined 
             * in the current scope */
            if( symtab.addConstant( id, pos, c ) == null ) {
                error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef SEMICOLON 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef SEMICOLON 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              Tree.BlockNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new Tree.BlockNode( dl, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramHead ::= 
            {
              Scope RESULT =null;
		
            /* This action occurs before the whole program is recognised.
             * Construct initial symbol table with current scope the 
             * predefined scope. */
            symtab = new SymbolTable(); 
            // Enter the scope for the main program
            RESULT = symtab.newScope();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProgramHead",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Tree.ProgramNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
               avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Tree.ProgramNode start_val = (Tree.ProgramNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramHead Block 
            {
              Tree.ProgramNode RESULT =null;
		int scopeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int scoperight = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Scope scope = (Scope)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Tree.BlockNode block = (Tree.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* This action is executed after the whole program 
             * has been recognised */
            block.setBlockLocals( scope );
            symtab.leaveScope();
            /* Returned result of the whole parsing phase */
            RESULT = new Tree.ProgramNode( symtab, block );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

